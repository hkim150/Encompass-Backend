// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_profile.sql

package db

import (
	"context"
	"database/sql"
)

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO user_profile (
  zipcode, timezone
) VALUES (
  $1, $2
)
RETURNING user_account_id, zipcode, timezone
`

type CreateUserProfileParams struct {
	Zipcode  sql.NullString
	Timezone sql.NullString
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, createUserProfile, arg.Zipcode, arg.Timezone)
	var i UserProfile
	err := row.Scan(&i.UserAccountID, &i.Zipcode, &i.Timezone)
	return i, err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM user_profile
WHERE user_account_id = $1
`

func (q *Queries) DeleteUserProfile(ctx context.Context, userAccountID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserProfile, userAccountID)
	return err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT user_account_id, zipcode, timezone FROM user_profile
WHERE user_account_id = $1 LIMIT 1
`

func (q *Queries) GetUserProfile(ctx context.Context, userAccountID int64) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, userAccountID)
	var i UserProfile
	err := row.Scan(&i.UserAccountID, &i.Zipcode, &i.Timezone)
	return i, err
}

const listUserProfiles = `-- name: ListUserProfiles :many
SELECT user_account_id, zipcode, timezone FROM user_profile
ORDER BY user_account_id
LIMIT $1
OFFSET $2
`

type ListUserProfilesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUserProfiles(ctx context.Context, arg ListUserProfilesParams) ([]UserProfile, error) {
	rows, err := q.db.QueryContext(ctx, listUserProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserProfile
	for rows.Next() {
		var i UserProfile
		if err := rows.Scan(&i.UserAccountID, &i.Zipcode, &i.Timezone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE user_profile
  set zipcode = $2,
  timezone = $3
WHERE user_account_id = $1
RETURNING user_account_id, zipcode, timezone
`

type UpdateUserProfileParams struct {
	UserAccountID int64
	Zipcode       sql.NullString
	Timezone      sql.NullString
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile, arg.UserAccountID, arg.Zipcode, arg.Timezone)
	var i UserProfile
	err := row.Scan(&i.UserAccountID, &i.Zipcode, &i.Timezone)
	return i, err
}
