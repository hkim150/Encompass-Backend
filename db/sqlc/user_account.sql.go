// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_account.sql

package db

import (
	"context"
)

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_account (
  username, email
) VALUES (
  $1, $2
)
RETURNING user_account_id, username, email, create_time
`

type CreateUserAccountParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount, arg.Username, arg.Email)
	var i UserAccount
	err := row.Scan(
		&i.UserAccountID,
		&i.Username,
		&i.Email,
		&i.CreateTime,
	)
	return i, err
}

const deleteUserAccount = `-- name: DeleteUserAccount :exec
DELETE FROM user_account
WHERE user_account_id = $1
`

func (q *Queries) DeleteUserAccount(ctx context.Context, userAccountID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserAccount, userAccountID)
	return err
}

const getUserAccount = `-- name: GetUserAccount :one
SELECT user_account_id, username, email, create_time FROM user_account
WHERE user_account_id = $1 LIMIT 1
`

func (q *Queries) GetUserAccount(ctx context.Context, userAccountID int64) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getUserAccount, userAccountID)
	var i UserAccount
	err := row.Scan(
		&i.UserAccountID,
		&i.Username,
		&i.Email,
		&i.CreateTime,
	)
	return i, err
}

const listUserAccounts = `-- name: ListUserAccounts :many
SELECT user_account_id, username, email, create_time FROM user_account
ORDER BY user_account_id
LIMIT $1
OFFSET $2
`

type ListUserAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserAccounts(ctx context.Context, arg ListUserAccountsParams) ([]UserAccount, error) {
	rows, err := q.db.QueryContext(ctx, listUserAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccount
	for rows.Next() {
		var i UserAccount
		if err := rows.Scan(
			&i.UserAccountID,
			&i.Username,
			&i.Email,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAccount = `-- name: UpdateUserAccount :one
UPDATE user_account
  set username = $2,
  email = $3
WHERE user_account_id = $1
RETURNING user_account_id, username, email, create_time
`

type UpdateUserAccountParams struct {
	UserAccountID int64  `json:"user_account_id"`
	Username      string `json:"username"`
	Email         string `json:"email"`
}

func (q *Queries) UpdateUserAccount(ctx context.Context, arg UpdateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, updateUserAccount, arg.UserAccountID, arg.Username, arg.Email)
	var i UserAccount
	err := row.Scan(
		&i.UserAccountID,
		&i.Username,
		&i.Email,
		&i.CreateTime,
	)
	return i, err
}
